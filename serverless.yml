service: notey-serverless-api
# app and org for use with dashboard.serverless.com
app: notey-serverless-api
org: rageless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:PutItem
  #     Resource: !GetAtt notesTable.Arn
  # Resource: arn:aws:dynamodb:us-east-1:041109984593:table/notes

# you can add statements to the Lambda function's IAM Role here

# hello:
#   handler: handler.hello
functions:
  createNote:
    handler: handler.createNote
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NewResource.Arn
    # event array represents any event that will invoke the particular lambda function
    events:
      - http:
          method: post
          path: notes
  updateNote:
    handler: handler.updateNote
    # event array represents any event that will invoke the particular lambda function
    events:
      - http:
          method: put
          path: notes/{id} # identified as variable in serverless
  deleteNote:
    handler: handler.deleteNote
    # event array represents any event that will invoke the particular lambda function
    events:
      - http:
          method: delete
          path: notes/{id} # identified as variable in serverless
  getNoteById:
    handler: handler.getNoteById
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt NewResource.Arn
    events: 
      - http:
          method: get
          path: notes/{id}
  getAllNotes:
    handler: handler.getAllNotes
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt NewResource.Arn
    # event array represents any event that will invoke the particular lambda function
    events:
      - http:
          method: get
          path: notes/all # identified as variable in serverless

plugins:
  - serverless-iam-roles-per-function

# create a lambda function for creating a new note

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# creates dynamoDB table
resources:
  Resources:
    NewResource:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId #
            AttributeType: S #string
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

